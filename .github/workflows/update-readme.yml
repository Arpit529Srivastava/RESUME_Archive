name: Update README with Latest Resume

on:
  push:
    branches: [ main, master ]
    paths:
      - '*.pdf'
      - 'Arpit_Srivastava*.pdf'
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Find latest resume
      id: find-resume
      run: |
        # Find the resume PDF with the latest date in the filename (DD_MM_YYYY)
        latest_resume=""
        latest_date=0
        for file in Arpit_Srivastava_[0-9][0-9]_[0-9][0-9]_[0-9][0-9][0-9][0-9].pdf; do
          if [[ $file =~ Arpit_Srivastava_([0-9]{2})_([0-9]{2})_([0-9]{4})\.pdf ]]; then
            day="${BASH_REMATCH[1]}"
            month="${BASH_REMATCH[2]}"
            year="${BASH_REMATCH[3]}"
            file_date="${year}${month}${day}"
            if [[ $file_date -gt $latest_date ]]; then
              latest_date=$file_date
              latest_resume=$file
              latest_day=$day
              latest_month=$month
              latest_year=$year
            fi
          fi
        done
        
        if [ -z "$latest_resume" ]; then
          echo "No resume files found!"
          exit 1
        fi
        
        echo "Latest resume: $latest_resume"
        echo "latest_resume=$latest_resume" >> $GITHUB_OUTPUT
        echo "Resume date: $latest_year-$latest_month-$latest_day"
        echo "resume_date=$latest_year-$latest_month-$latest_day" >> $GITHUB_OUTPUT
    
    - name: Update README
      run: |
        latest_resume="${{ steps.find-resume.outputs.latest_resume }}"
        resume_date="${{ steps.find-resume.outputs.resume_date }}"
        
        # Get the repository owner and name from GitHub context
        repo_owner="${{ github.repository_owner }}"
        repo_name="${{ github.event.repository.name }}"
        
        # Create the new download link
        new_link="https://github.com/$repo_owner/$repo_name/raw/main/$latest_resume"
        
        # Check if README.md exists, if not create it
        if [ ! -f README.md ]; then
          echo "# Resume Archive" > README.md
          echo "" >> README.md
          echo "This repository contains my resume files in PDF format." >> README.md
          echo "" >> README.md
          echo "## Latest Resume" >> README.md
          echo "" >> README.md
          echo "ðŸ“„ **[Download Latest Resume]($new_link)** - Updated: $resume_date" >> README.md
          echo "" >> README.md
          echo "## Resume History" >> README.md
          echo "" >> README.md
          echo "- [$latest_resume]($new_link) - $resume_date" >> README.md
          echo "" >> README.md
          echo "---" >> README.md
          echo "*This README is automatically updated when new resume files are added.*" >> README.md
        else
          # Update existing README.md with the new link
          # First, try to update the download link in the "Latest Resume" section
          sed -i "s|https://github\.com/[^/]*/[^/]*/raw/main/Arpit_Srivastava[^\"]*\.pdf|$new_link|g" README.md
          
          # Update the date in the README
          sed -i "s|Updated: [^)]*|Updated: $resume_date|g" README.md
          
          # Add the new resume to the history if it's not already there
          if ! grep -q "$latest_resume" README.md; then
            # Find the line before "---" and add the new resume entry
            sed -i "/^---$/i - [$latest_resume]($new_link) - $resume_date" README.md
          fi
        fi
        
        echo "Updated README.md with latest resume: $latest_resume"
        echo "Download link: $new_link"
        
        # Check if README was actually modified
        if git diff --quiet README.md; then
          echo "No changes needed to README.md"
          echo "readme_changed=false" >> $GITHUB_ENV
        else
          echo "README.md has been updated"
          echo "readme_changed=true" >> $GITHUB_ENV
          git diff README.md
        fi
    
    - name: Commit and push changes
      if: env.readme_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Auto-update README with latest resume: ${{ steps.find-resume.outputs.latest_resume }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create summary
      run: |
        latest_resume="${{ steps.find-resume.outputs.latest_resume }}"
        resume_date="${{ steps.find-resume.outputs.resume_date }}"
        
        echo "## ðŸ“„ Resume Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Resume:** \`$latest_resume\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Resume Date:** $resume_date" >> $GITHUB_STEP_SUMMARY
        echo "- **README Updated:** ${{ env.readme_changed }}" >> $GITHUB_STEP_SUMMARY 